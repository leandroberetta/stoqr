// Code generated by MockGen. DO NOT EDIT.
// Source: repositories/item.go

// Package mock_repositories is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/leandroberetta/stoqr/stoqr-api/models"
)

// MockItemRepository is a mock of ItemRepository interface.
type MockItemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockItemRepositoryMockRecorder
}

// MockItemRepositoryMockRecorder is the mock recorder for MockItemRepository.
type MockItemRepositoryMockRecorder struct {
	mock *MockItemRepository
}

// NewMockItemRepository creates a new mock instance.
func NewMockItemRepository(ctrl *gomock.Controller) *MockItemRepository {
	mock := &MockItemRepository{ctrl: ctrl}
	mock.recorder = &MockItemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemRepository) EXPECT() *MockItemRepositoryMockRecorder {
	return m.recorder
}

// CreateItem mocks base method.
func (m *MockItemRepository) CreateItem(item *models.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItem", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateItem indicates an expected call of CreateItem.
func (mr *MockItemRepositoryMockRecorder) CreateItem(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItem", reflect.TypeOf((*MockItemRepository)(nil).CreateItem), item)
}

// DeleteItem mocks base method.
func (m *MockItemRepository) DeleteItem(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItem", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItem indicates an expected call of DeleteItem.
func (mr *MockItemRepositoryMockRecorder) DeleteItem(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockItemRepository)(nil).DeleteItem), id)
}

// ReadItem mocks base method.
func (m *MockItemRepository) ReadItem(id int) (models.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadItem", id)
	ret0, _ := ret[0].(models.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadItem indicates an expected call of ReadItem.
func (mr *MockItemRepositoryMockRecorder) ReadItem(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadItem", reflect.TypeOf((*MockItemRepository)(nil).ReadItem), id)
}

// ReadItems mocks base method.
func (m *MockItemRepository) ReadItems(filter string) ([]models.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadItems", filter)
	ret0, _ := ret[0].([]models.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadItems indicates an expected call of ReadItems.
func (mr *MockItemRepositoryMockRecorder) ReadItems(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadItems", reflect.TypeOf((*MockItemRepository)(nil).ReadItems), filter)
}

// UpdateItem mocks base method.
func (m *MockItemRepository) UpdateItem(id int, item models.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", id, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockItemRepositoryMockRecorder) UpdateItem(id, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockItemRepository)(nil).UpdateItem), id, item)
}
